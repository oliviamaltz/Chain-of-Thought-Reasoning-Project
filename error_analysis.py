# -*- coding: utf-8 -*-
"""error_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1npVpMGGxIjlWAsvXNJXUe4Ww-2abXlrp
"""

import json
import pandas as pd
import os

from google.colab import drive

drive.mount('/content/drive')

predictions_path = "/content/drive/MyDrive/m4_8epoch_finetuned_predictions05.json"
test_questions_path = "/content/drive/MyDrive/selected_test_questions.json"

with open(predictions_path, 'r') as pred_file:
    predictions = json.load(pred_file)

with open(test_questions_path, 'r') as test_file:
    test_questions = json.load(test_file)

test_questions_df = pd.DataFrame(test_questions)
predictions_df = pd.DataFrame(predictions)

test_questions_df

predictions_df

test_questions_df = test_questions_df[['imageId', 'answer']].rename(columns={'imageId': 'questionId'})
test_questions_df

merged_df = predictions_df.merge(test_questions_df, on='questionId', how='inner')
merged_df

merged_df['prediction'] = merged_df['prediction'].str.lower()
merged_df['answer'] = merged_df['answer'].str.lower()

merged_df['is_correct'] = merged_df['prediction'] == merged_df['answer']

def categorize_question(row):
    sub_questions = row['sub_questions'].lower()
    if 'where' in sub_questions:
        return 'Location'
    elif 'what' in sub_questions:
        return 'Object Identification'
    elif 'who' in sub_questions:
        return 'Person Identification'
    else:
        return 'Other'

merged_df['question_type'] = merged_df.apply(categorize_question, axis=1)
merged_df

performance_by_type = merged_df.groupby('question_type')['is_correct'].mean().reset_index()
performance_by_type.rename(columns={'is_correct': 'accuracy'}, inplace=True)
performance_by_type

error_analysis = merged_df[~merged_df['is_correct']]
error_analysis

strongbaseline_path = "/content/drive/MyDrive/differences_strongbaseline_incorrect.json"

with open(strongbaseline_path, 'r') as strong_file:
    strong_questions = json.load(strong_file)

strong_questions_df = pd.DataFrame(strong_questions)
strong_questions_df

strong_not_in_error = strong_questions_df[~strong_questions_df['ImageID'].isin(error_analysis['questionId'])]
strong_not_in_error

x = strong_not_in_error.iloc[20:]
x

specific_row = x[x['ImageID'] == '107913']
specific_row